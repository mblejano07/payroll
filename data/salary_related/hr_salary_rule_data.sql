-- Disable triggers before import (skip if you don't have superuser privileges)
-- ALTER TABLE public.hr_salary_rule DISABLE TRIGGER ALL;

-- Optional: Truncate table to avoid duplicate key violations (Only if safe)
TRUNCATE TABLE public.hr_salary_rule CASCADE;

COPY public.hr_salary_rule (id, sequence, category_id, parent_rule_id, company_id, register_id, create_uid, write_uid, code, quantity, condition_select, condition_range, amount_select, amount_percentage_base, name, condition_python, amount_python_compute, note, amount_fix, amount_percentage, active, appears_on_payslip, create_date, write_date, condition_range_min, condition_range_max) FROM stdin;
2	100	3	\N	1	\N	1	1	GROSS	1.0	none	contract.wage	code	\N	{"en_US": "Gross"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	\nresult = categories.BASIC + categories.ALW\n        	\N	\N	\N	t	t	2025-03-24 03:03:09.755724	2025-03-24 03:03:09.755724	\N	\N
37	5	23	\N	1	\N	2	2	BONUS	1.0	none	contract.wage	fix	\N	{"en_US": "Bonus"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n# result_rate: the rate that will be applied to "result".\n# result_qty: the quantity of units that will be multiplied to "result".\n# result_name: if this variable is computed, it will contain the name of the line.\n\n# Example:\n#-------------------------------\n# result = contract.wage * 0.10	\N	0.00	0.0000	t	t	2025-03-28 06:44:16.012487	2025-03-28 06:45:02.728433	0	0
39	200	\N	\N	1	\N	2	2	NET-ONSITE	1.0	none	contract.wage	code	\N	{"en_US": "Net Salary - ONSITE"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	result = categories.BASIC + categories.NTAX + categories.DED + categories.OT + categories.BONUS + categories.NP - categories.TAX\n	\N	0.00	0.0000	t	t	2025-04-09 23:48:33.2726	2025-04-09 23:49:46.743685	0	0
13	5	4	\N	1	\N	2	2	PAGIBIG	1.0	none	contract.wage	code	\N	{"en_US": "HDMF"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Get employee wage\nwage = contract.wage or 0.0\n\n# Get env from localdict\npagibig_model =  rules.env['pagibig.contribution']\n\n# Search for the matching Pag-IBIG bracket\npagibig = pagibig_model.search([\n    ('min_salary', '<=', wage),\n    ('max_salary', '>=', wage),\n], limit=1)\n\n# Default result\nresult = 0.0\n\n# Set result based on table\nif pagibig:\n    result = -pagibig.employee_share\n	\N	-100.00	0.0000	t	t	2025-03-24 04:04:49.891826	2025-04-14 07:25:07.470758	0	0
29	5	21	\N	1	\N	2	2	OTO	1.0	none	contract.wage	code	\N	{"en_US": "Ordinary - Overtime"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	hourly_rate = contract.wage / (22 * 8) if contract.wage else 0\ntotal_ot_pay = 0.0\n\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'OTO' and wd.number_of_hours:\n        minutes = wd.number_of_hours * 60\n        rounded_minutes = (minutes // 15) * 15  # round down to nearest 15 mins\n        rounded_hours = rounded_minutes / 60\n        total_ot_pay += 1.25 * rounded_hours * hourly_rate\n\nresult = total_ot_pay\n	\N	0.00	0.0000	t	t	2025-03-28 02:17:55.16334	2025-04-14 02:11:18.926883	0	0
27	5	4	\N	1	\N	2	2	UT	1.0	none	contract.wage	code	\N	{"en_US": "Undertime"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Initialize total deduction for undertime\ntotal_deduction = 0.0\n\n# Compute hourly rate based on 22 working days and 8 hours per day\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Loop through each worked day and calculate undertime for each day\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'UT' and wd.number_of_hours:\n        # Fetch undertime for the day (convert to minutes)\n        undertime_minutes = wd.number_of_hours * 60\n        \n        # Round down the undertime minutes to the nearest 15 minutes\n        rounded_undertime_minutes = (undertime_minutes // 15) * 15\n        \n        # Convert rounded minutes back to hours\n        rounded_undertime_hours = rounded_undertime_minutes / 60\n        \n        # Calculate the deduction for the day and add it to the total deduction\n        total_deduction += rounded_undertime_hours * hourly_rate\n\n# Final result is the total deduction\nresult = total_deduction\n	\N	0.00	0.0000	t	t	2025-03-28 00:39:20.396883	2025-04-14 02:27:23.101764	0	0
6	150	20	\N	1	\N	1	2	WT	1.0	none	contract.wage	code	\N	{"en_US": "Withholding Tax"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Fetch the taxable income\ntaxable_income = (contract.wage/2 or 0) - (contract.x_non_taxable/2 or 0) + categories.DED\n\ndef compute_withholding_tax(taxable_income):\n    if taxable_income <= 10417:\n        return 0\n    elif taxable_income <= 16666:\n        return (taxable_income - 10417) * 0.15\n    elif taxable_income <= 33332:\n        return 937.50 + (taxable_income - 16667) * 0.20\n    elif taxable_income <= 83332:\n        return 4270.70 + (taxable_income - 33333) * 0.25\n    elif taxable_income <= 333332:\n        return 16770.70 + (taxable_income - 83333) * 0.30\n    else:\n        return 91770.70 + (taxable_income - 333333) * 0.35\n\n# Compute withholding tax\nresult = compute_withholding_tax(taxable_income) or 0	\N	-200.00	\N	t	t	2025-03-24 03:03:09.755724	2025-03-28 06:38:45.538924	\N	\N
23	5	19	\N	1	\N	2	2	NT	1.0	none	contract.wage	code	\N	{"en_US": "Non-Taxable"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	if contract.schedule_pay == 'monthly':\n    result = contract.x_non_taxable\nelif contract.schedule_pay == 'weekly':\n    result = contract.x_non_taxable / 4\nelif contract.schedule_pay == 'bi-weekly':\n    result = contract.x_non_taxable / 2	\N	0.00	0.0000	t	t	2025-03-27 10:01:03.738679	2025-03-27 23:45:53.205511	0	0
12	5	4	\N	1	\N	2	2	PhilHealth	1.0	none	contract.wage	code	\N	{"en_US": "Philhealth"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Get employee wage\nwage = contract.wage or 0.0\n\n\n# Access environment using localdict\nphilhealth_model = rules.env['philhealth.contribution']\n\n# Search for the matching PhilHealth bracket\nphilhealth = philhealth_model.search([\n    ('min_salary', '<=', wage),\n    ('max_salary', '>=', wage),\n], limit=1)\n\n# Set default result\nresult = 0.0\n\n# If a matching bracket is found, use the employee_share\nif philhealth:\n    result = -.05*wage\n	\N	-490.63	0.0000	t	t	2025-03-24 04:04:49.891826	2025-04-14 07:09:26.583596	0	0
1	1	1	\N	1	\N	1	2	BASIC	1.0	none	contract.wage	code	\N	{"en_US": "Basic Salary"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Adjust basic salary based on pay schedule\nif contract.schedule_pay == 'monthly':\n    result = contract.x_basic_salary\nelif contract.schedule_pay == 'weekly':\n    result = contract.x_basic_salary / 4\nelif contract.schedule_pay == 'bi-weekly':\n    result = contract.x_basic_salary / 2	\N	\N	\N	t	t	2025-03-24 03:03:09.755724	2025-03-27 23:42:59.438945	\N	\N
26	5	4	\N	1	\N	2	2	LATE	1.0	none	contract.wage	code	\N	{"en_US": "Late"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Initialize total deduction for lateness\ntotal_late_deduction = 0.0\n\n# Compute hourly rate based on 22 working days and 8 hours per day\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Loop through each worked day line and compute for late hours\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'LATE' and wd.number_of_hours:\n        # Convert late hours to minutes\n        late_minutes = wd.number_of_hours * 60\n        \n        # Round down to the nearest 15 minutes\n        rounded_minutes = (late_minutes // 15) * 15\n        \n        # Convert back to hours\n        rounded_hours = rounded_minutes / 60\n        \n        # Add deduction for the day\n        total_late_deduction += rounded_hours * hourly_rate\n\n# Final result\nresult = total_late_deduction\n	\N	0.00	0.0000	t	t	2025-03-28 00:39:06.819729	2025-04-14 02:51:14.868562	0	0
25	5	4	\N	1	\N	2	2	LWP	1.0	none	contract.wage	code	\N	{"en_US": "Leave Without Pay"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Ensure no_of_absence is properly fetched, default to 0 if missing\nno_of_absence = worked_days.GLOBAL.number_of_days if worked_days.GLOBAL else 0\n\n# Compute daily rate based on standard 22 working days per month\ndaily_rate = contract.wage / 22 if contract.wage else 0\n\n# Ensure result is always a number\nresult = no_of_absence * daily_rate if no_of_absence and daily_rate else 0\n# result =  worked_days.GLOBAL.number_of_days if worked_days.GLOBAL else 0\n\n	\N	0.00	0.0000	t	t	2025-03-28 00:36:07.546421	2025-03-28 01:27:58.824108	0	0
3	200	5	\N	1	1	1	2	NET	1.0	none	contract.wage	code	\N	{"en_US": "Net Salary"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	\n# Final computation including allowances and deductions\nresult = categories.BASIC + categories.NTAX + categories.DED + categories.OT + categories.BONUS + categories.NP - categories.TAX\n	\N	\N	\N	t	t	2025-03-24 03:03:09.755724	2025-03-28 06:45:22.389675	\N	\N
32	5	21	\N	1	\N	2	2	OTSH	1.0	none	contract.wage	code	\N	{"en_US": "Special Holiday - Overtime"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	hourly_rate = contract.wage / (22 * 8) if contract.wage else 0\ntotal_special_holiday_ot_pay = 0.0\n\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'OTSH' and wd.number_of_hours:\n        # Fetch total hours worked on special holiday\n        total_hours_special_holiday_pay = wd.number_of_hours\n        \n        # Convert total hours to minutes and round down to nearest 15 mins\n        minutes = total_hours_special_holiday_pay * 60\n        rounded_minutes = (minutes // 15) * 15  # round down to nearest 15 mins\n        rounded_hours = rounded_minutes / 60\n        \n        # Compute regular special holiday pay (first 8 hours)\n        regular_hours = min(rounded_hours, 8)\n        special_holiday_pay = 1.30 * regular_hours * hourly_rate\n        \n        # Compute overtime pay for any extra hours beyond 8\n        overtime_hours = max(rounded_hours - 8, 0)\n        overtime_pay = 1.625 * overtime_hours * hourly_rate\n        \n        # Total pay for special holiday OT\n        total_special_holiday_ot_pay += special_holiday_pay + overtime_pay\n\nresult = total_special_holiday_ot_pay\n	\N	0.00	0.0000	t	t	2025-03-28 02:20:11.039609	2025-04-14 02:23:50.934369	0	0
31	5	21	\N	1	\N	2	2	OTLH	1.0	none	contract.wage	code	\N	{"en_US": "Legal Holiday - Overtime"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	hourly_rate = contract.wage / (22 * 8) if contract.wage else 0\ntotal_legal_holiday_ot_pay = 0.0\n\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'OTLH' and wd.number_of_hours:\n        # Fetch total hours worked on legal holiday\n        total_hours_legal_holiday = wd.number_of_hours\n        \n        # Convert total hours to minutes and round down to nearest 15 mins\n        minutes = total_hours_legal_holiday * 60\n        rounded_minutes = (minutes // 15) * 15  # round down to nearest 15 mins\n        rounded_hours = rounded_minutes / 60\n        \n        # Compute regular legal holiday pay (first 8 hours)\n        regular_hours = min(rounded_hours, 8)\n        legal_holiday_pay = 2.0 * regular_hours * hourly_rate\n        \n        # Compute overtime pay for any extra hours beyond 8\n        overtime_hours = max(rounded_hours - 8, 0)\n        overtime_pay = 2.5 * overtime_hours * hourly_rate\n        \n        # Total pay for legal holiday OT\n        total_legal_holiday_ot_pay += legal_holiday_pay + overtime_pay\n\nresult = total_legal_holiday_ot_pay\n	\N	0.00	0.0000	t	t	2025-03-28 02:19:25.443934	2025-04-14 02:22:12.756782	0	0
35	5	22	\N	1	\N	2	2	NPLH	1.0	none	contract.wage	code	\N	{"en_US": "Legal Holiday - Nightly Premium"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Fetch worked night premium hours on a legal holiday\nnight_premium_legal_holiday = worked_days.NPLH.number_of_hours if worked_days.NPLH else 0\n\n# Compute hourly rate\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Compute night premium pay for a legal holiday\nresult = 2.00 * 1.10 * night_premium_legal_holiday * hourly_rate if night_premium_legal_holiday and hourly_rate else 0\n	\N	0.00	0.0000	t	t	2025-03-28 04:21:30.907001	2025-03-28 05:51:50.007212	0	0
33	5	22	\N	1	\N	2	2	NPO	1.0	none	contract.wage	code	\N	{"en_US": "Ordinary - Nightly Premium"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Fetch worked night premium hours on an ordinary day\nnight_premium_ordinary = worked_days.NPO.number_of_hours if worked_days.NPO else 0\n\n# Compute hourly rate based on 22 working days and 8 hours per day\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Compute night premium pay for an ordinary day\nresult = 1.10 * night_premium_ordinary * hourly_rate if night_premium_ordinary and hourly_rate else 0\n	\N	0.00	0.0000	t	t	2025-03-28 04:20:25.157359	2025-03-28 05:51:27.839979	0	0
34	5	22	\N	1	\N	2	2	NPR	1.0	none	contract.wage	code	\N	{"en_US": "Rest Day - Nightly Premium"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Fetch worked night premium hours on a rest day\nnight_premium_rest_day = worked_days.NPRD.number_of_hours if worked_days.NPRD else 0\n\n# Compute hourly rate\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Compute night premium pay for a rest day\nresult = 1.30 * 1.10 * night_premium_rest_day * hourly_rate if night_premium_rest_day and hourly_rate else 0\n	\N	0.00	0.0000	t	t	2025-03-28 04:21:06.507578	2025-03-28 05:51:38.254342	0	0
36	5	22	\N	1	\N	2	2	NPSH	1.0	none	contract.wage	code	\N	{"en_US": "Special Holiday - Nightly Premium"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Fetch worked night premium hours on a special holiday\nnight_premium_special_holiday = worked_days.NPSH.number_of_hours if worked_days.NPSH else 0\n\n# Compute hourly rate\nhourly_rate = contract.wage / (22 * 8) if contract.wage else 0\n\n# Compute night premium pay for a special holiday\nresult = 1.30 * 1.10 * night_premium_special_holiday * hourly_rate if night_premium_special_holiday and hourly_rate else 0\n	\N	0.00	0.0000	t	t	2025-03-28 04:21:47.224263	2025-03-28 05:52:02.754879	0	0
30	5	21	\N	1	\N	2	2	OTRD	1.0	none	contract.wage	code	\N	{"en_US": "Rest Day - Overtime"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	hourly_rate = contract.wage / (22 * 8) if contract.wage else 0\ntotal_rest_day_ot_pay = 0.0\n\nfor wd in payslip.worked_days_line_ids:\n    if wd.code == 'OTRD' and wd.number_of_hours:\n        # Fetch total hours worked on rest day\n        total_hours_rest_day = wd.number_of_hours\n        \n        # Convert total hours to minutes and round down to nearest 15 mins\n        minutes = total_hours_rest_day * 60\n        rounded_minutes = (minutes // 15) * 15  # round down to nearest 15 mins\n        rounded_hours = rounded_minutes / 60\n        \n        # Compute regular rest day pay (first 8 hours)\n        regular_hours = min(rounded_hours, 8)\n        rest_day_pay = 1.30 * regular_hours * hourly_rate\n        \n        # Compute overtime pay for any extra hours beyond 8\n        overtime_hours = max(rounded_hours - 8, 0)\n        overtime_pay = 1.625 * overtime_hours * hourly_rate\n        \n        # Total pay for rest day OT\n        total_rest_day_ot_pay += rest_day_pay + overtime_pay\n\nresult = total_rest_day_ot_pay\n	\N	0.00	0.0000	t	t	2025-03-28 02:18:27.101946	2025-04-14 02:19:48.395391	0	0
11	5	4	\N	1	\N	2	2	SSS Premium	1.0	none	contract.wage	code	\N	{"en_US": "SSS Premium"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	# Get employee wage from contract\nwage = contract.wage or 0.0\n\n# Access environment using localdict\nsss_model = rules.env['sss.contribution']\n\n# Search for the matching SSS contribution range\nsss_contribution = sss_model.search([\n    ('range_min', '<=', wage),\n    ('range_max', '>=', wage),\n], limit=1)\n\n# Default result\nresult = 0.0\n\n# Set the deduction value if match is found\nif sss_contribution:\n    result = -sss_contribution.employee_regular_ss\n	\N	-875.00	0.0000	t	t	2025-03-24 04:02:26.853988	2025-04-14 06:54:03.018841	0	0
42	5	25	\N	1	\N	2	2	LOAN_PHILHEALTH	1.0	none	contract.wage	code	\N	{"en_US": "LOAN PHILHEALTH"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	result = -sum(input.amount for input in payslip.input_line_ids if input.code == 'LOAN_PHILHEALTH')	\N	0.00	0.0000	t	t	2025-04-25 06:46:41.926899	2025-04-25 08:07:00.580146	0	0
41	5	25	\N	1	\N	2	2	LOAN_SALARY	1.0	none	contract.wage	code	\N	{"en_US": "LOAN SALARY"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	result = -sum(input.amount for input in payslip.input_line_ids if input.code == 'LOAN_SALARY')	\N	0.00	0.0000	t	t	2025-04-25 06:46:10.910307	2025-04-25 08:07:14.616217	0	0
43	5	25	\N	1	\N	2	2	LOAN_SSS	1.0	none	contract.wage	code	\N	{"en_US": "LOAN SSS"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	result = -sum(input.amount for input in payslip.input_line_ids if input.code == 'LOAN_SSS')	\N	0.00	0.0000	t	t	2025-04-25 06:46:53.732301	2025-04-25 08:06:12.531887	0	0
44	5	25	\N	1	\N	2	2	LOAN_PAGIBIG	1.0	none	contract.wage	code	\N	{"en_US": "LOAN PAG-IBIG"}	# Available variables:\n#-------------------------------\n# payslip: hr.payslip object\n# payslips: object containing payslips (browsable)\n# employee: hr.employee object\n# contract: hr.contract object\n# rules: object containing the rules code (previously computed)\n# categories: object containing the computed salary rule categories\n#    (sum of amount of all rules belonging to that category).\n# worked_days: object containing the computed worked days.\n# inputs: object containing the computed inputs.\n# payroll: object containing miscellaneous values related to payroll\n# current_contract: object with values calculated from the current contract\n# result_rules: object with a dict of qty, rate, amount an total of calculated rules\n# tools: object that contain libraries and tools that can be used in calculations\n\n# Available compute variables:\n#-------------------------------\n# result: returned value have to be set in the variable 'result'\n\n# Example:\n#-------------------------------\n# result = worked_days.WORK0 and worked_days.WORK0.number_of_days > 0	result = -sum(input.amount for input in payslip.input_line_ids if input.code == 'LOAN_PAGIBIG')	\N	10000.00	0.0000	t	t	2025-04-25 07:10:21.388786	2025-04-25 08:05:34.412701	0	0
\.

-- Update Sequence Value After Data Insertion
SELECT pg_catalog.setval('public.hr_salary_rule_id_seq', (SELECT MAX(id) FROM public.hr_salary_rule), true);

-- Re-enable triggers after import (skip if you don't have superuser privileges)
-- ALTER TABLE public.hr_salary_rule ENABLE TRIGGER ALL;